// src/components/Header.js
import React from 'react';
import { Link } from 'react-router-dom';
import authService from '../services/authService';

const Header = () => {
  const isAuthenticated = authService.isAuthenticated();

  const handleLogout = () => {
    authService.logout();
  };

  return (
    <header style={{ 
      padding: '1rem', 
      background: '#2c3e50', 
      color: 'white',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center'
    }}>
      <div>
        <Link to="/" style={{ color: 'white', textDecoration: 'none', fontSize: '1.5rem', fontWeight: 'bold' }}>
          My App
        </Link>
      </div>
      
      <nav style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>
        <Link to="/" style={{ color: 'white', textDecoration: 'none' }}>Home</Link>
        
        {isAuthenticated ? (
          <>
            <Link to="/profile" style={{ color: 'white', textDecoration: 'none' }}>Profile</Link>
            <Link to="/admin" style={{ color: 'white', textDecoration: 'none' }}>Admin</Link>
            <button 
              onClick={handleLogout}
              style={{
                padding: '0.5rem 1rem',
                background: '#e74c3c',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              Logout
            </button>
          </>
        ) : (
          <Link to="/login" style={{ color: 'white', textDecoration: 'none' }}>Login</Link>
        )}
      </nav>
    </header>
  );
};

export default Header;



// src/components/Home.js
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import authService from '../services/authService';
import apiService from '../services/api';

const Home = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [publicData, setPublicData] = useState('');
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    setIsAuthenticated(authService.isAuthenticated());
  }, []);

  const fetchPublicData = async () => {
    try {
      setLoading(true);
      const data = await apiService.get('/public/hello');
      setPublicData(data);
    } catch (error) {
      setPublicData('Error fetching data');
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: '2rem', maxWidth: '800px', margin: '0 auto' }}>
      <h1>Welcome to Our Application</h1>
      
      <div style={{ margin: '2rem 0', padding: '1.5rem', background: '#f8f9fa', borderRadius: '8px' }}>
        <h2>Public Information</h2>
        <p>This content is available to all visitors.</p>
        
        <button 
          onClick={fetchPublicData}
          disabled={loading}
          style={{
            padding: '0.75rem 1.5rem',
            background: '#3498db',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            marginRight: '1rem'
          }}
        >
          {loading ? 'Loading...' : 'Fetch Public Data'}
        </button>
        
        {publicData && (
          <div style={{ marginTop: '1rem', padding: '1rem', background: '#e3f2fd', borderRadius: '4px' }}>
            <strong>API Response:</strong> {publicData}
          </div>
        )}
      </div>

      {!isAuthenticated ? (
        <div style={{ margin: '2rem 0', padding: '1.5rem', background: '#e8f5e8', borderRadius: '8px' }}>
          <h2>Get Started</h2>
          <p>Please log in to access all features of our application.</p>
          <Link to="/login">
            <button style={{
              padding: '0.75rem 1.5rem',
              background: '#27ae60',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer'
            }}>
              Login Now
            </button>
          </Link>
        </div>
      ) : (
        <div style={{ margin: '2rem 0', padding: '1.5rem', background: '#fff3cd', borderRadius: '8px' }}>
          <h2>Welcome Back!</h2>
          <p>You are now logged in and can access all features.</p>
          <div style={{ display: 'flex', gap: '1rem', marginTop: '1rem' }}>
            <Link to="/profile">
              <button style={{
                padding: '0.75rem 1.5rem',
                background: '#3498db',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}>
                View Profile
              </button>
            </Link>
            <Link to="/admin">
              <button style={{
                padding: '0.75rem 1.5rem',
                background: '#9b59b6',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}>
                Admin Dashboard
              </button>
            </Link>
          </div>
        </div>
      )}

      <div style={{ marginTop: '2rem', padding: '1.5rem', background: '#f5f5f5', borderRadius: '8px' }}>
        <h3>About This Application</h3>
        <p>
          This is a secure application built with React and Spring Boot, integrated with Okta for authentication 
          and authorization. The application demonstrates proper security practices including JWT token management, 
          role-based access control, and secure API communication.
        </p>
      </div>
    </div>
  );
};

export default Home;


// src/components/Profile.js
import React, { useState, useEffect } from 'react';
import authService from '../services/authService';
import apiService from '../services/api';

const Profile = () => {
  const [userInfo, setUserInfo] = useState(null);
  const [protectedData, setProtectedData] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchUserInfo();
  }, []);

  const fetchUserInfo = async () => {
    try {
      const user = await authService.getCurrentUser();
      setUserInfo(user);
    } catch (error) {
      console.error('Error fetching user info:', error);
      setError('Failed to load user information');
    }
  };

  const fetchProtectedData = async () => {
    try {
      setLoading(true);
      setError('');
      const data = await apiService.get('/protected/user');
      setProtectedData(data);
    } catch (error) {
      console.error('Error fetching protected data:', error);
      setError('Failed to fetch protected data. Please try again.');
      setProtectedData('');
    } finally {
      setLoading(false);
    }
  };

  const fetchUserProfile = async () => {
    try {
      setLoading(true);
      setError('');
      const data = await apiService.get('/profile');
      console.log('User profile data:', data);
      // Handle the profile data as needed
    } catch (error) {
      console.error('Error fetching user profile:', error);
      setError('Failed to fetch user profile');
    } finally {
      setLoading(false);
    }
  };

  if (!userInfo) {
    return (
      <div style={{ padding: '2rem', textAlign: 'center' }}>
        <div>Loading user information...</div>
      </div>
    );
  }

  return (
    <div style={{ padding: '2rem', maxWidth: '800px', margin: '0 auto' }}>
      <h1>User Profile</h1>
      
      {error && (
        <div style={{ 
          padding: '1rem', 
          background: '#ffebee', 
          color: '#c62828', 
          borderRadius: '4px',
          marginBottom: '1rem'
        }}>
          {error}
        </div>
      )}

      <div style={{ 
        padding: '1.5rem', 
        background: 'white', 
        borderRadius: '8px', 
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        marginBottom: '2rem'
      }}>
        <h2>Personal Information</h2>
        <div style={{ display: 'grid', gridTemplateColumns: '150px 1fr', gap: '1rem', marginTop: '1rem' }}>
          <strong>Name:</strong>
          <span>{userInfo.name || 'Not available'}</span>
          
          <strong>Email:</strong>
          <span>{userInfo.email || 'Not available'}</span>
          
          <strong>Username:</strong>
          <span>{userInfo.preferred_username || userInfo.email || 'Not available'}</span>
        </div>

        {userInfo.attributes && (
          <>
            <h3 style={{ marginTop: '1.5rem' }}>Additional Attributes</h3>
            <pre style={{ 
              background: '#f5f5f5', 
              padding: '1rem', 
              borderRadius: '4px', 
              overflow: 'auto',
              fontSize: '0.9rem'
            }}>
              {JSON.stringify(userInfo.attributes, null, 2)}
            </pre>
          </>
        )}
      </div>

      <div style={{ 
        padding: '1.5rem', 
        background: 'white', 
        borderRadius: '8px', 
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        <h2>Protected Data Access</h2>
        <p>Test your access to protected API endpoints:</p>
        
        <div style={{ display: 'flex', gap: '1rem', marginTop: '1rem', flexWrap: 'wrap' }}>
          <button 
            onClick={fetchProtectedData}
            disabled={loading}
            style={{
              padding: '0.75rem 1.5rem',
              background: '#3498db',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer',
              minWidth: '200px'
            }}
          >
            {loading ? 'Loading...' : 'Call Protected API'}
          </button>

          <button 
            onClick={fetchUserProfile}
            disabled={loading}
            style={{
              padding: '0.75rem 1.5rem',
              background: '#9b59b6',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer',
              minWidth: '200px'
            }}
          >
            {loading ? 'Loading...' : 'Get User Profile'}
          </button>
        </div>

        {protectedData && (
          <div style={{ 
            marginTop: '1rem', 
            padding: '1rem', 
            background: '#e3f2fd', 
            borderRadius: '4px',
            borderLeft: '4px solid #3498db'
          }}>
            <h4>Protected API Response:</h4>
            <pre style={{ margin: 0, whiteSpace: 'pre-wrap' }}>
              {typeof protectedData === 'string' ? protectedData : JSON.stringify(protectedData, null, 2)}
            </pre>
          </div>
        )}
      </div>

      <div style={{ 
        marginTop: '2rem', 
        padding: '1.5rem', 
        background: '#fff3cd', 
        borderRadius: '8px',
        borderLeft: '4px solid #ffc107'
      }}>
        <h3>Security Information</h3>
        <p>
          Your authentication token is securely stored and automatically included in all API requests.
          The token will expire after a certain period, at which point you'll need to log in again.
        </p>
        <p style={{ fontSize: '0.9rem', color: '#666' }}>
          Token present: {authService.getToken() ? 'Yes' : 'No'}
        </p>
      </div>
    </div>
  );
};

export default Profile;


// src/components/Admin.js
import React, { useState, useEffect } from 'react';
import authService from '../services/authService';
import apiService from '../services/api';

const Admin = () => {
  const [adminData, setAdminData] = useState('');
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [userInfo, setUserInfo] = useState(null);

  useEffect(() => {
    fetchUserInfo();
  }, []);

  const fetchUserInfo = async () => {
    try {
      const user = await authService.getCurrentUser();
      setUserInfo(user);
    } catch (error) {
      console.error('Error fetching user info:', error);
    }
  };

  const fetchAdminData = async () => {
    try {
      setLoading(true);
      setError('');
      const data = await apiService.get('/admin/dashboard');
      setAdminData(data);
    } catch (error) {
      console.error('Error fetching admin data:', error);
      setError('Access denied or failed to fetch admin data. You may not have admin privileges.');
      setAdminData('');
    } finally {
      setLoading(false);
    }
  };

  const fetchUsers = async () => {
    try {
      setLoading(true);
      setError('');
      // This endpoint would need to be created in your Spring Boot backend
      const data = await apiService.get('/admin/users');
      setUsers(data);
    } catch (error) {
      console.error('Error fetching users:', error);
      setError('Failed to fetch users data');
      setUsers([]);
    } finally {
      setLoading(false);
    }
  };

  const simulateAdminAction = async () => {
    try {
      setLoading(true);
      setError('');
      const data = await apiService.post('/admin/action', { action: 'test' });
      alert(`Admin action successful: ${JSON.stringify(data)}`);
    } catch (error) {
      console.error('Error performing admin action:', error);
      setError('Failed to perform admin action');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: '2rem', maxWidth: '1000px', margin: '0 auto' }}>
      <h1>Admin Dashboard</h1>
      
      {userInfo && (
        <div style={{ 
          padding: '1rem', 
          background: '#e8f5e8', 
          borderRadius: '4px',
          marginBottom: '1rem'
        }}>
          <strong>Logged in as:</strong> {userInfo.email}
          {userInfo.attributes?.groups && (
            <span> | <strong>Groups:</strong> {userInfo.attributes.groups.join(', ')}</span>
          )}
        </div>
      )}

      {error && (
        <div style={{ 
          padding: '1rem', 
          background: '#ffebee', 
          color: '#c62828', 
          borderRadius: '4px',
          marginBottom: '1rem'
        }}>
          {error}
        </div>
      )}

      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: '1fr 1fr', 
        gap: '2rem',
        marginBottom: '2rem'
      }}>
        <div style={{ 
          padding: '1.5rem', 
          background: 'white', 
          borderRadius: '8px', 
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
        }}>
          <h2>Admin Actions</h2>
          <p>Perform administrative tasks:</p>
          
          <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem', marginTop: '1rem' }}>
            <button 
              onClick={fetchAdminData}
              disabled={loading}
              style={{
                padding: '0.75rem 1.5rem',
                background: '#3498db',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                textAlign: 'left'
              }}
            >
              {loading ? 'Loading...' : '1. Get Admin Dashboard Data'}
            </button>

            <button 
              onClick={fetchUsers}
              disabled={loading}
              style={{
                padding: '0.75rem 1.5rem',
                background: '#9b59b6',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                textAlign: 'left'
              }}
            >
              {loading ? 'Loading...' : '2. Fetch Users List'}
            </button>

            <button 
              onClick={simulateAdminAction}
              disabled={loading}
              style={{
                padding: '0.75rem 1.5rem',
                background: '#e74c3c',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                textAlign: 'left'
              }}
            >
              {loading ? 'Processing...' : '3. Perform Admin Action'}
            </button>
          </div>
        </div>

        <div style={{ 
          padding: '1.5rem', 
          background: 'white', 
          borderRadius: '8px', 
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
        }}>
          <h2>Admin Data</h2>
          
          {adminData && (
            <div style={{ 
              marginBottom: '1.5rem', 
              padding: '1rem', 
              background: '#e3f2fd', 
              borderRadius: '4px'
            }}>
              <h4>Dashboard Data:</h4>
              <pre style={{ margin: 0, whiteSpace: 'pre-wrap' }}>
                {typeof adminData === 'string' ? adminData : JSON.stringify(adminData, null, 2)}
              </pre>
            </div>
          )}

          {users.length > 0 && (
            <div>
              <h4>Users List:</h4>
              <div style={{ maxHeight: '200px', overflowY: 'auto' }}>
                <pre style={{ margin: 0, fontSize: '0.9rem' }}>
                  {JSON.stringify(users, null, 2)}
                </pre>
              </div>
            </div>
          )}

          {!adminData && !users.length && (
            <p style={{ color: '#666', fontStyle: 'italic' }}>
              No data available yet. Use the actions on the left to fetch data.
            </p>
          )}
        </div>
      </div>

      <div style={{ 
        padding: '1.5rem', 
        background: '#fff3cd', 
        borderRadius: '8px',
        borderLeft: '4px solid #ffc107'
      }}>
        <h3>Admin Privileges Required</h3>
        <p>
          This section is protected and requires administrative privileges. The backend verifies that your 
          user account has the necessary roles (e.g., "ROLE_ADMIN") before allowing access to these functions.
        </p>
        <p style={{ fontSize: '0.9rem', color: '#666' }}>
          If you see access denied errors, please contact your system administrator to be granted 
          the appropriate permissions.
        </p>
      </div>

      <div style={{ 
        marginTop: '2rem', 
        padding: '1.5rem', 
        background: '#f5f5f5', 
        borderRadius: '8px'
      }}>
        <h3>System Information</h3>
        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem' }}>
          <div>
            <strong>Frontend:</strong> React.js
          </div>
          <div>
            <strong>Backend:</strong> Spring Boot
          </div>
          <div>
            <strong>Authentication:</strong> Okta + JWT
          </div>
          <div>
            <strong>API Security:</strong> Role-based Access Control
          </div>
        </div>
      </div>
    </div>
  );
};

export default Admin;


// src/services/authService.js
const API_BASE_URL = 'http://localhost:8080/api';

class AuthService {
  async login(username, password) {
    try {
      const response = await fetch(`${API_BASE_URL}/auth/token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username, password }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(errorData || 'Login failed');
      }

      const data = await response.json();
      this.setToken(data.token);
      return data;
    } catch (error) {
      console.error('Login error:', error);
      throw error;
    }
  }

  async loginWithOkta() {
    window.location.href = 'http://localhost:8080/api/auth/login/okta';
  }

  setToken(token) {
    if (token) {
      localStorage.setItem('token', token);
      // Set token expiration (1 hour from now)
      const expirationTime = Date.now() + 3600000; // 1 hour
      localStorage.setItem('token_expiration', expirationTime.toString());
    }
  }

  getToken() {
    const token = localStorage.getItem('token');
    const expiration = localStorage.getItem('token_expiration');
    
    // Check if token is expired
    if (token && expiration && Date.now() > parseInt(expiration)) {
      this.removeToken();
      return null;
    }
    
    return token;
  }

  removeToken() {
    localStorage.removeItem('token');
    localStorage.removeItem('token_expiration');
  }

  isAuthenticated() {
    return !!this.getToken();
  }

  async getCurrentUser() {
    const token = this.getToken();
    if (!token) return null;

    try {
      const response = await fetch(`${API_BASE_URL}/auth/user`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (response.ok) {
        return await response.json();
      }
      return null;
    } catch (error) {
      console.error('Error fetching user:', error);
      return null;
    }
  }

  logout() {
    this.removeToken();
    // Redirect to Spring Boot logout
    window.location.href = 'http://localhost:8080/logout';
  }

  // Helper method to check token expiration
  getTokenExpiration() {
    const expiration = localStorage.getItem('token_expiration');
    return expiration ? new Date(parseInt(expiration)) : null;
  }
}

export default new AuthService();
