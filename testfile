// OracleDiagnostic.java
import java.sql.*;
import java.util.*;

public class OracleDiagnostic {
    
    public static void main(String[] args) {
        System.out.println("üöÄ ORACLE DATABASE DIAGNOSTIC STARTING...\n");
        
        // Test multiple connection scenarios
        testAllConnections();
    }
    
    private static void testAllConnections() {
        String host = "localhost";
        String port = "1521"; // Oracle default port
        String username = "your_username"; // REPLACE WITH ACTUAL
        String password = "your_password"; // REPLACE WITH ACTUAL
        
        List<String> testCases = new ArrayList<>();
        
        // Oracle connection URL formats
        // Format 1: SID format
        testCases.add("jdbc:oracle:thin:@" + host + ":" + port + ":XE");
        testCases.add("jdbc:oracle:thin:@" + host + ":" + port + ":ORCL");
        
        // Format 2: Service name format
        testCases.add("jdbc:oracle:thin:@//" + host + ":" + port + "/XE");
        testCases.add("jdbc:oracle:thin:@//" + host + ":" + port + "/ORCLCDB");
        testCases.add("jdbc:oracle:thin:@//" + host + ":" + port + "/ORCL");
        
        // Format 3: TNS format (if you have tnsnames.ora)
        // testCases.add("jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=" + host + ")(PORT=" + port + "))(CONNECT_DATA=(SID=XE)))");
        
        for (String url : testCases) {
            testConnection(url, username, password);
        }
    }
    
    private static void testConnection(String url, String username, String password) {
        System.out.println("üîó Testing: " + url);
        
        try {
            // Load Oracle driver
            Class.forName("oracle.jdbc.OracleDriver");
            
            // Test connection
            try (Connection conn = DriverManager.getConnection(url, username, password)) {
                System.out.println("‚úÖ ORACLE CONNECTION SUCCESSFUL");
                
                DatabaseMetaData meta = conn.getMetaData();
                System.out.println("   Database: " + meta.getDatabaseProductName() + " " + meta.getDatabaseProductVersion());
                System.out.println("   URL: " + meta.getURL());
                System.out.println("   User: " + meta.getUserName());
                
                // Get current user/schema
                String currentUser = getCurrentUser(conn);
                System.out.println("   Current User: " + currentUser);
                
                // List ALL schemas (users) that we have access to
                System.out.println("\nüìã ALL SCHEMAS (USERS) WE CAN ACCESS:");
                listAllSchemas(conn);
                
                // List tables in current schema
                System.out.println("\nüìä TABLES IN CURRENT SCHEMA:");
                listTablesInCurrentSchema(conn);
                
                // Specifically search for our table
                searchForOurTable(conn, currentUser);
                
            } catch (SQLException e) {
                System.out.println("‚ùå CONNECTION FAILED: " + e.getMessage());
                System.out.println("   SQL State: " + e.getSQLState());
                System.out.println("   Error Code: " + e.getErrorCode());
                if (e.getErrorCode() == 1017) {
                    System.out.println("   üí° This is an invalid username/password error");
                } else if (e.getErrorCode() == 12505) {
                    System.out.println("   üí° TNS listener error - check SID/service name");
                }
            }
            
        } catch (ClassNotFoundException e) {
            System.out.println("‚ùå ORACLE JDBC DRIVER NOT FOUND");
            System.out.println("   Download from: https://www.oracle.com/database/technologies/appdev/jdbc-downloads.html");
        } catch (Exception e) {
            System.out.println("‚ùå UNEXPECTED ERROR: " + e.getMessage());
        }
        
        System.out.println("---".repeat(20) + "\n");
    }
    
    private static String getCurrentUser(Connection conn) throws SQLException {
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT USER FROM DUAL")) {
            if (rs.next()) {
                return rs.getString(1);
            }
        }
        return "unknown";
    }
    
    private static void listAllSchemas(Connection conn) throws SQLException {
        DatabaseMetaData meta = conn.getMetaData();
        
        // Get all schemas (users) we can see
        try (ResultSet schemas = meta.getSchemas()) {
            int count = 0;
            while (schemas.next()) {
                String schema = schemas.getString("TABLE_SCHEM");
                System.out.println("   - " + schema);
                count++;
            }
            System.out.println("   Total: " + count + " schemas");
        }
    }
    
    private static void listTablesInCurrentSchema(Connection conn) throws SQLException {
        DatabaseMetaData meta = conn.getMetaData();
        String currentUser = getCurrentUser(conn);
        
        // Get tables in current schema
        try (ResultSet tables = meta.getTables(null, currentUser, "%", new String[]{"TABLE"})) {
            int tableCount = 0;
            while (tables.next()) {
                String tableName = tables.getString("TABLE_NAME");
                String tableType = tables.getString("TABLE_TYPE");
                System.out.println("   - " + tableName + " (" + tableType + ")");
                tableCount++;
            }
            System.out.println("   Total: " + tableCount + " tables");
        }
    }
    
    private static void searchForOurTable(Connection conn, String currentSchema) {
        System.out.println("\nüîé SEARCHING FOR OUR TABLE...");
        
        String[] tablePatterns = {"%APDM%", "%REP%", "%DFS%", "%APDM_REP%", "%DFS_APDM%"};
        
        try {
            DatabaseMetaData meta = conn.getMetaData();
            
            for (String pattern : tablePatterns) {
                System.out.println("   Searching for pattern: " + pattern);
                
                // Search in current schema
                try (ResultSet tables = meta.getTables(null, currentSchema, pattern, new String[]{"TABLE"})) {
                    while (tables.next()) {
                        String tableName = tables.getString("TABLE_NAME");
                        System.out.println("   ‚úÖ FOUND IN CURRENT SCHEMA: " + tableName);
                        showTableStructure(conn, currentSchema, tableName);
                    }
                }
                
                // Search in all schemas
                try (ResultSet tables = meta.getTables(null, null, pattern, new String[]{"TABLE"})) {
                    while (tables.next()) {
                        String schema = tables.getString("TABLE_SCHEM");
                        String tableName = tables.getString("TABLE_NAME");
                        if (!schema.equals(currentSchema)) {
                            System.out.println("   üîç FOUND IN SCHEMA " + schema + ": " + tableName);
                        }
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("   Search failed: " + e.getMessage());
        }
    }
    
    private static void showTableStructure(Connection conn, String schema, String tableName) {
        try {
            System.out.println("   üìê STRUCTURE OF " + schema + "." + tableName + ":");
            
            // Oracle-specific: describe table
            String sql = "SELECT column_name, data_type, nullable FROM all_tab_columns " +
                        "WHERE owner = ? AND table_name = ? ORDER BY column_id";
            
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, schema.toUpperCase());
                pstmt.setString(2, tableName.toUpperCase());
                
                ResultSet rs = pstmt.executeQuery();
                while (rs.next()) {
                    String column = rs.getString("column_name");
                    String type = rs.getString("data_type");
                    String nullable = rs.getString("nullable");
                    System.out.println("      - " + column + " | " + type + " | " + nullable);
                }
            }
        } catch (Exception e) {
            System.out.println("   Failed to describe table: " + e.getMessage());
        }
    }
}
