
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from datadog import initialize, statsd
import pandas as pd
import time
import os

# Configuration
SHAREPOINT_URL = "https://yourcompany.sharepoint.com/sites/yoursite/SitePages/YourPage.aspx"
USERNAME = os.getenv('SHAREPOINT_USER', 'your.email@company.com')
PASSWORD = os.getenv('SHAREPOINT_PASSWORD', 'yourpassword')

# DogStatsD Configuration
DATADOG_STATSD_HOST = "localhost"
DATADOG_STATSD_PORT = 8125

def extract_sharepoint_table():
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    
    driver = webdriver.Chrome(options=options)
    
    try:
        # Access SharePoint
        driver.get(SHAREPOINT_URL)
        time.sleep(5)

        # Handle login if needed
        try:
            username_field = driver.find_element(By.ID, "i0116")
            username_field.send_keys(USERNAME)
            driver.find_element(By.ID, "idSIButton9").click()
            time.sleep(2)
            
            password_field = driver.find_element(By.ID, "i0118")
            password_field.send_keys(PASSWORD)
            driver.find_element(By.ID, "idSIButton9").click()
            time.sleep(5)
        except:
            pass

        # Locate and extract table
        heading = WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'Intra-Day Customer Payment Processing')]"))
        )
        table = heading.find_element(By.XPATH, "./following::table[1]")
        table_html = table.get_attribute("outerHTML")
        df = pd.read_html(table_html)[0]
        
        # Clean column names
        df.columns = ['Event', 'Processing_Complete_ET', 'SLA_Status']
        print("Extracted Table Data:")
        print(df)
        
        return df
        
    finally:
        driver.quit()

def send_raw_metrics(df):
    initialize(statsd_host=DATADOG_STATSD_HOST, statsd_port=DATADOG_STATSD_PORT)
    
    for _, row in df.iterrows():
        event_name = row['Event'].lower().replace(' ', '_')
        
        # Send SLA Status as string event
        statsd.event(
            title=f"Payment Processing SLA Status - {row['Event']}",
            message=f"SLA Status: {row['SLA_Status']} | Processing Time: {row['Processing_Complete_ET']}",
            tags=[f'event:{event_name}', 'source:sharepoint']
        )
        
        # Send each value as separate metric
        statsd.gauge(
            'sharepoint.payment_processing.status',
            1,  # Dummy value since we're using tags to carry the real data
            tags=[
                f'event:{event_name}',
                f'sla_status:{row["SLA_Status"].lower()}',
                f'processing_time:{row["Processing_Complete_ET"]}'
            ]
        )
        
        print(f"Sent raw data for {event_name}")

if __name__ == "__main__":
    table_data = extract_sharepoint_table()
    send_raw_metrics(table_data)
