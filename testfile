// src/App.js
import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Header from './components/Header';
import Home from './components/Home';
import Login from './components/Login';
import LoginCallback from './components/LoginCallback';
import Profile from './components/Profile';
import Admin from './components/Admin';
import authService from './services/authService';
import './App.css';

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(authService.isAuthenticated());
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Check authentication status on app load
    setIsAuthenticated(authService.isAuthenticated());
    setLoading(false);

    // Optional: Set up periodic authentication check
    const interval = setInterval(() => {
      setIsAuthenticated(authService.isAuthenticated());
    }, 30000); // Check every 30 seconds

    return () => clearInterval(interval);
  }, []);

  if (loading) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        height: '100vh' 
      }}>
        <div>Loading application...</div>
      </div>
    );
  }

  return (
    <Router>
      <div className="App">
        <Header isAuthenticated={isAuthenticated} setIsAuthenticated={setIsAuthenticated} />
        <main style={{ minHeight: 'calc(100vh - 80px)' }}>
          <Routes>
            <Route path="/" element={<Home isAuthenticated={isAuthenticated} />} />
            <Route 
              path="/login" 
              element={
                isAuthenticated ? 
                <Navigate to="/" replace /> : 
                <Login setIsAuthenticated={setIsAuthenticated} />
              } 
            />
            <Route 
              path="/login/callback" 
              element={<LoginCallback setIsAuthenticated={setIsAuthenticated} />} 
            />
            <Route 
              path="/profile" 
              element={
                isAuthenticated ? 
                <Profile /> : 
                <Navigate to="/login" replace />
              } 
            />
            <Route 
              path="/admin" 
              element={
                isAuthenticated ? 
                <Admin /> : 
                <Navigate to="/login" replace />
              } 
            />
            {/* Catch all route - redirect to home */}
            <Route path="*" element={<Navigate to="/" replace />} />
          </Routes>
        </main>
      </div>
    </Router>
  );
}

export default App;



// src/components/Header.js
import React from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import authService from '../services/authService';

const Header = ({ isAuthenticated, setIsAuthenticated }) => {
  const navigate = useNavigate();
  const location = useLocation();

  const handleLogout = () => {
    authService.logout();
    setIsAuthenticated(false);
    navigate('/');
  };

  const handleNavigation = (path) => {
    navigate(path);
  };

  const isActive = (path) => {
    return location.pathname === path;
  };

  return (
    <header style={{ 
      padding: '1rem', 
      background: '#2c3e50', 
      color: 'white',
      display: 'flex',
      justifyContent: 'space-between',
      alignItems: 'center',
      position: 'sticky',
      top: 0,
      zIndex: 1000
    }}>
      <div>
        <button 
          onClick={() => handleNavigation('/')}
          style={{ 
            color: 'white', 
            textDecoration: 'none', 
            fontSize: '1.5rem', 
            fontWeight: 'bold',
            background: 'none',
            border: 'none',
            cursor: 'pointer'
          }}
        >
          My App
        </button>
      </div>
      
      <nav style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>
        <button 
          onClick={() => handleNavigation('/')}
          style={{ 
            color: 'white', 
            textDecoration: 'none', 
            background: 'none',
            border: 'none',
            cursor: 'pointer',
            fontWeight: isActive('/') ? 'bold' : 'normal',
            borderBottom: isActive('/') ? '2px solid white' : 'none'
          }}
        >
          Home
        </button>
        
        {isAuthenticated ? (
          <>
            <button 
              onClick={() => handleNavigation('/profile')}
              style={{ 
                color: 'white', 
                textDecoration: 'none', 
                background: 'none',
                border: 'none',
                cursor: 'pointer',
                fontWeight: isActive('/profile') ? 'bold' : 'normal',
                borderBottom: isActive('/profile') ? '2px solid white' : 'none'
              }}
            >
              Profile
            </button>
            <button 
              onClick={() => handleNavigation('/admin')}
              style={{ 
                color: 'white', 
                textDecoration: 'none', 
                background: 'none',
                border: 'none',
                cursor: 'pointer',
                fontWeight: isActive('/admin') ? 'bold' : 'normal',
                borderBottom: isActive('/admin') ? '2px solid white' : 'none'
              }}
            >
              Admin
            </button>
            <button 
              onClick={handleLogout}
              style={{
                padding: '0.5rem 1rem',
                background: '#e74c3c',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              Logout
            </button>
          </>
        ) : (
          <button 
            onClick={() => handleNavigation('/login')}
            style={{ 
              color: 'white', 
              textDecoration: 'none', 
              background: 'none',
              border: 'none',
              cursor: 'pointer',
              fontWeight: isActive('/login') ? 'bold' : 'normal',
              borderBottom: isActive('/login') ? '2px solid white' : 'none'
            }}
          >
            Login
          </button>
        )}
      </nav>
    </header>
  );
};

export default Header;


// src/components/Login.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import authService from '../services/authService';

const Login = ({ setIsAuthenticated }) => {
  const [credentials, setCredentials] = useState({ username: '', password: '' });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      await authService.login(credentials.username, credentials.password);
      setIsAuthenticated(true);
      navigate('/');
    } catch (err) {
      setError(err.message || 'Login failed. Please check your credentials.');
    } finally {
      setLoading(false);
    }
  };

  const handleOktaLogin = () => {
    authService.loginWithOkta();
  };

  return (
    <div style={{ 
      padding: '2rem', 
      maxWidth: '400px', 
      margin: '0 auto',
      minHeight: '60vh',
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center'
    }}>
      <h2 style={{ textAlign: 'center', marginBottom: '2rem' }}>Login</h2>
      
      {error && (
        <div style={{ 
          color: 'red', 
          padding: '1rem', 
          background: '#ffebee', 
          borderRadius: '4px',
          marginBottom: '1rem'
        }}>
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} style={{ marginBottom: '2rem' }}>
        <div style={{ marginBottom: '1rem' }}>
          <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: 'bold' }}>
            Username:
          </label>
          <input
            type="text"
            value={credentials.username}
            onChange={(e) => setCredentials({...credentials, username: e.target.value})}
            style={{
              width: '100%',
              padding: '0.75rem',
              border: '1px solid #ddd',
              borderRadius: '4px',
              fontSize: '1rem'
            }}
            required
          />
        </div>
        <div style={{ marginBottom: '1rem' }}>
          <label style={{ display: 'block', marginBottom: '0.5rem', fontWeight: 'bold' }}>
            Password:
          </label>
          <input
            type="password"
            value={credentials.password}
            onChange={(e) => setCredentials({...credentials, password: e.target.value})}
            style={{
              width: '100%',
              padding: '0.75rem',
              border: '1px solid #ddd',
              borderRadius: '4px',
              fontSize: '1rem'
            }}
            required
          />
        </div>
        <button 
          type="submit" 
          disabled={loading}
          style={{
            width: '100%',
            padding: '0.75rem',
            background: loading ? '#ccc' : '#27ae60',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: loading ? 'not-allowed' : 'pointer',
            fontSize: '1rem'
          }}
        >
          {loading ? 'Logging in...' : 'Login'}
        </button>
      </form>

      <div style={{ textAlign: 'center' }}>
        <div style={{ margin: '1rem 0', position: 'relative' }}>
          <div style={{ 
            position: 'absolute', 
            top: '50%', 
            left: 0, 
            right: 0, 
            height: '1px', 
            background: '#ddd' 
          }}></div>
          <span style={{ 
            background: 'white', 
            padding: '0 1rem', 
            position: 'relative', 
            color: '#666' 
          }}>
            OR
          </span>
        </div>
        
        <button 
          onClick={handleOktaLogin}
          disabled={loading}
          style={{
            padding: '0.75rem 2rem',
            background: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '1rem'
          }}
        >
          Login with Okta
        </button>
      </div>
    </div>
  );
};

export default Login;


// src/components/LoginCallback.js
import React, { useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import authService from '../services/authService';

const LoginCallback = ({ setIsAuthenticated }) => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();

  useEffect(() => {
    const handleCallback = async () => {
      try {
        // Check for token in URL parameters (if your backend redirects with token)
        const token = searchParams.get('token');
        
        if (token) {
          authService.setToken(token);
          setIsAuthenticated(true);
          navigate('/', { replace: true });
        } else {
          // If no token in URL, try to get current user
          const user = await authService.getCurrentUser();
          if (user) {
            setIsAuthenticated(true);
            navigate('/', { replace: true });
          } else {
            throw new Error('No user information found');
          }
        }
      } catch (error) {
        console.error('Login callback error:', error);
        navigate('/login', { 
          replace: true,
          state: { error: 'Login failed. Please try again.' }
        });
      }
    };

    handleCallback();
  }, [navigate, searchParams, setIsAuthenticated]);

  return (
    <div style={{ 
      display: 'flex', 
      justifyContent: 'center', 
      alignItems: 'center', 
      height: '50vh',
      flexDirection: 'column'
    }}>
      <div style={{ fontSize: '1.5rem', marginBottom: '1rem' }}>
        Processing login...
      </div>
      <div style={{ color: '#666' }}>
        Please wait while we complete your authentication.
      </div>
    </div>
  );
};

export default LoginCallback;


/* src/App.css */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f5f5f5;
}

.App {
  min-height: 100vh;
}

/* Button reset styles */
button {
  font-family: inherit;
}

/* Remove default button styles and add consistent styling */
button {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  cursor: pointer;
  outline: none;
}

/* Loading animation */
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.loading-spinner {
  border: 3px solid #f3f3f3;
  border-top: 3px solid #3498db;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  animation: spin 1s linear infinite;
  display: inline-block;
  margin-right: 10px;
}


// src/services/authService.js
const API_BASE_URL = 'http://localhost:8080/api';

class AuthService {
  async login(username, password) {
    try {
      const response = await fetch(`${API_BASE_URL}/auth/token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ username, password }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || `Login failed with status: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.token) {
        throw new Error('No token received from server');
      }

      this.setToken(data.token);
      return data;
    } catch (error) {
      console.error('Login error:', error);
      throw new Error(error.message || 'Login failed. Please try again.');
    }
  }

  async loginWithOkta() {
    try {
      window.location.href = 'http://localhost:8080/api/auth/login/okta';
    } catch (error) {
      console.error('Okta login error:', error);
      throw new Error('Failed to initiate Okta login');
    }
  }

  setToken(token) {
    if (token && typeof token === 'string') {
      localStorage.setItem('token', token);
      const expirationTime = Date.now() + 3600000; // 1 hour
      localStorage.setItem('token_expiration', expirationTime.toString());
    }
  }

  getToken() {
    try {
      const token = localStorage.getItem('token');
      const expiration = localStorage.getItem('token_expiration');
      
      if (token && expiration && Date.now() > parseInt(expiration)) {
        this.removeToken();
        return null;
      }
      
      return token;
    } catch (error) {
      console.error('Error getting token:', error);
      return null;
    }
  }

  removeToken() {
    try {
      localStorage.removeItem('token');
      localStorage.removeItem('token_expiration');
    } catch (error) {
      console.error('Error removing token:', error);
    }
  }

  isAuthenticated() {
    return !!this.getToken();
  }

  async getCurrentUser() {
    const token = this.getToken();
    if (!token) return null;

    try {
      const response = await fetch(`${API_BASE_URL}/auth/user`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
      });

      if (response.ok) {
        return await response.json();
      }
      
      if (response.status === 401) {
        this.removeToken();
      }
      
      return null;
    } catch (error) {
      console.error('Error fetching user:', error);
      return null;
    }
  }

  logout() {
    this.removeToken();
    window.location.href = '/';
  }
}

// Create a singleton instance
const authService = new AuthService();
export default authService;
