import AuthService from "./AuthService"; // assumed to have getToken(), removeToken()

const baseUrl = "http://localhost:8080/api";

class ApiService {
  static async request(endpoint, options = {}) {
    const url = new URL(`${baseUrl}${endpoint}`);

    // ✅ Handle query params (including pagination)
    if (options.params) {
      Object.entries(options.params).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          url.searchParams.append(key, value);
        }
      });
    }

    // ✅ Attach token if available
    const token = AuthService.getToken?.();
    const headers = {
      "Content-Type": "application/json",
      ...(options.headers || {}),
      ...(token ? { Authorization: `Bearer ${token}` } : {})
    };

    const method = options.method || "GET";
    const fetchOptions = { method, headers };

    // ✅ Add body only for non-GET/HEAD
    if (options.body && method !== "GET" && method !== "HEAD") {
      fetchOptions.body = JSON.stringify(options.body);
    }

    try {
      const response = await fetch(url, fetchOptions);

      // ✅ Handle unauthorized → clear token + throw
      if (response.status === 401) {
        AuthService.removeToken?.();
        throw new Error("Unauthorized. Please log in again.");
      }

      // ✅ Handle no-content
      if (response.status === 204) {
        return null;
      }

      // ✅ Handle success (2xx)
      if (response.ok) {
        return await response.json();
      }

      // ✅ Handle errors (try JSON, else text)
      let errorData;
      try {
        errorData = await response.json();
      } catch {
        errorData = { message: await response.text() };
      }
      throw new Error(
        errorData.message || `Request failed with status ${response.status}`
      );

    } catch (err) {
      console.error("ApiService error:", err);
      throw err;
    }
  }

  // ---- HTTP method helpers ----
  static get(endpoint, options = {}) {
    return this.request(endpoint, { ...options, method: "GET" });
  }

  static post(endpoint, body, options = {}) {
    return this.request(endpoint, { ...options, method: "POST", body });
  }

  static put(endpoint, body, options = {}) {
    return this.request(endpoint, { ...options, method: "PUT", body });
  }

  static patch(endpoint, body, options = {}) {
    return this.request(endpoint, { ...options, method: "PATCH", body });
  }

  static delete(endpoint, options = {}) {
    return this.request(endpoint, { ...options, method: "DELETE" });
  }
}

export default ApiService;
