import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    private final JwtTokenFilter jwtTokenFilter;

    public SecurityConfig(JwtTokenFilter jwtTokenFilter) {
        this.jwtTokenFilter = jwtTokenFilter;
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            .csrf(csrf -> csrf.disable())
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)
            )
            .authorizeHttpRequests(authz -> authz
                .requestMatchers("/api/auth/**", "/login/**", "/oauth2/**", "/error").permitAll()
                .requestMatchers("/api/public/**").permitAll()
                .requestMatchers("/api/admin/**").hasRole("ADMIN")
                .anyRequest().authenticated()
            )
            .oauth2Login(oauth2 -> oauth2
                .defaultSuccessUrl("http://localhost:3000/login/success", true)
                .failureUrl("http://localhost:3000/login?error=auth_failed")
            )
            .addFilterBefore(jwtTokenFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("http://localhost:3000"));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type", "X-Requested-With"));
        configuration.setAllowCredentials(true);
        
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}


import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Map;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    private final JwtTokenUtil jwtTokenUtil;

    public AuthController(JwtTokenUtil jwtTokenUtil) {
        this.jwtTokenUtil = jwtTokenUtil;
    }

    @GetMapping("/user")
    public Map<String, Object> getCurrentUser(@AuthenticationPrincipal OidcUser principal) {
        if (principal == null) {
            return Map.of("error", "Not authenticated");
        }
        return Map.of(
            "name", principal.getFullName(),
            "email", principal.getEmail(),
            "attributes", principal.getAttributes()
        );
    }

    @GetMapping("/login/success")
    public void loginSuccess(@AuthenticationPrincipal OidcUser principal, 
                           HttpServletResponse response) throws IOException {
        if (principal != null) {
            // Create UserDetails from OAuth2 user
            UserDetails userDetails = org.springframework.security.core.userdetails.User
                .withUsername(principal.getEmail())
                .password("")
                .authorities(principal.getAuthorities())
                .build();
            
            String token = jwtTokenUtil.generateToken(userDetails);
            response.sendRedirect("http://localhost:3000/login/callback?token=" + token);
        } else {
            response.sendRedirect("http://localhost:3000/login?error=no_user");
        }
    }

    @GetMapping("/login/okta")
    public void oktaLogin(HttpServletResponse response) throws IOException {
        // Redirect to Spring Security's OAuth2 login endpoint
        response.sendRedirect("/oauth2/authorization/okta");
    }

    @GetMapping("/logout/success")
    public void logoutSuccess(HttpServletResponse response) throws IOException {
        response.sendRedirect("http://localhost:3000?message=logout_success");
    }
}
