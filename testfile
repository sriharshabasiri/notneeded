REACT_APP_ENVIRONMENT=local
REACT_APP_API_BASE_URL=http://localhost:8080/api
REACT_APP_WS_URL=ws://localhost:8080/ws
REACT_APP_DEBUG=true
REACT_APP_VERSION=1.0.0-local


REACT_APP_ENVIRONMENT=production
REACT_APP_API_BASE_URL=http://your-server-ip:8080/api
REACT_APP_WS_URL=ws://your-server-ip:8080/ws
REACT_APP_DEBUG=false
REACT_APP_VERSION=1.0.0



// src/config.js
const config = {
  local: {
    apiBaseUrl: process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api',
    wsUrl: process.env.REACT_APP_WS_URL || 'ws://localhost:8080/ws',
    environment: 'local',
    debug: process.env.REACT_APP_DEBUG === 'true',
    version: process.env.REACT_APP_VERSION || '1.0.0'
  },
  production: {
    apiBaseUrl: process.env.REACT_APP_API_BASE_URL || 'http://your-server-ip:8080/api',
    wsUrl: process.env.REACT_APP_WS_URL || 'ws://your-server-ip:8080/ws',
    environment: 'production',
    debug: false,
    version: process.env.REACT_APP_VERSION || '1.0.0'
  }
};


{
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "build:local": "REACT_APP_ENVIRONMENT=local react-scripts build",
    "build:staging": "REACT_APP_ENVIRONMENT=staging react-scripts build",
    "build:production": "REACT_APP_ENVIRONMENT=production react-scripts build",
    "build:server": "REACT_APP_API_BASE_URL=http://your-server-ip:8080/api react-scripts build"
  }
}

// Determine current environment
const getEnv = () => {
  if (process.env.NODE_ENV === 'production') {
    return 'production';
  }
  return 'local'; // default to local for development
};

export const currentConfig = config[getEnv()];
export default currentConfig;


// src/services/api.js
import { currentConfig } from '../config';

const API_BASE_URL = currentConfig.apiBaseUrl;

export const apiClient = {
  get: (endpoint) => fetch(`${API_BASE_URL}${endpoint}`),
  post: (endpoint, data) => fetch(`${API_BASE_URL}${endpoint}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data)
  })
};


// src/services/api.js
class ApiService {
  constructor() {
    this.baseURL = process.env.REACT_APP_API_BASE_URL;
  }

  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }

    return response.json();
  }

  // Example methods
  getUsers() {
    return this.request('/users');
  }

  createUser(userData) {
    return this.request('/users', {
      method: 'POST',
      body: JSON.stringify(userData),
    });
  }
}

export const apiService = new ApiService();


// src/utils/environment.js
export const isLocal = () => process.env.REACT_APP_ENVIRONMENT === 'local';
export const isProduction = () => process.env.REACT_APP_ENVIRONMENT === 'production';
export const isDevelopment = () => process.env.NODE_ENV === 'development';

export const getEnvironment = () => {
  if (isProduction()) return 'production';
  if (isLocal()) return 'local';
  return process.env.NODE_ENV;
};
