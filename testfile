1. Main Application Class
// src/main/java/com/example/performance/PerformanceApplication.java
package com.example.performance;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class PerformanceApplication {
    public static void main(String[] args) {
        SpringApplication.run(PerformanceApplication.class, args);
    }
}


2. Entity Class
// src/main/java/com/example/performance/model/PerformanceResult.java
package com.example.performance.model;

import lombok.Data;
import javax.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "PERFORMANCE_RESULTS")
@Data
public class PerformanceResult {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(name = "TEST_RUN_ID", nullable = false)
    private String testRunId;
    
    @Column(name = "API_NAME", nullable = false)
    private String apiName;
    
    @Column(name = "TIMESTAMP", nullable = false)
    private LocalDateTime timestamp;
    
    @Column(name = "RESPONSE_TIME")
    private Double responseTime;
    
    @Column(name = "MIN_RESPONSE")
    private Double minResponse;
    
    @Column(name = "MAX_RESPONSE")
    private Double maxResponse;
    
    @Column(name = "STATUS")
    private String status;
    
    @Column(name = "PERCENT_DEVIATION")
    private Double percentDeviation;
    
    @Column(name = "DESCRIPTION")
    private String description;
    
    // Add other columns as needed
}


3. DTO Classes

// src/main/java/com/example/performance/dto/ApiResult.java
package com.example.performance.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class ApiResult {
    private String apiName;
    private double avgResponseTime;
    private double minResponse;
    private double maxResponse;
    private int successCount;
    private int failureCount;
}

// src/main/java/com/example/performance/dto/TestRun.java
package com.example.performance.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

import java.time.LocalDateTime;

@Data
@AllArgsConstructor
public class TestRun {
    private String runId;
    private LocalDateTime timestamp;
    private String description;
}

4. Repository Interface
// src/main/java/com/example/performance/repository/PerformanceResultRepository.java
package com.example.performance.repository;

import com.example.performance.dto.ApiResult;
import com.example.performance.dto.TestRun;
import com.example.performance.model.PerformanceResult;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

@Repository
public interface PerformanceResultRepository extends JpaRepository<PerformanceResult, Long> {
    
    @Query("SELECT DISTINCT FUNCTION('TO_CHAR', p.timestamp, 'YYYY-MM') as month " +
           "FROM PerformanceResult p ORDER BY month DESC")
    List<String> findDistinctMonths();
    
    @Query("SELECT DISTINCT NEW com.example.performance.dto.TestRun(p.testRunId, p.timestamp, p.description) " +
           "FROM PerformanceResult p " +
           "WHERE p.timestamp BETWEEN :startDate AND :endDate " +
           "ORDER BY p.timestamp DESC")
    List<TestRun> findTestRunsBetweenDates(
            @Param("startDate") LocalDateTime startDate,
            @Param("endDate") LocalDateTime endDate);
    
    @Query("SELECT NEW com.example.performance.dto.ApiResult(" +
           "p.apiName, AVG(p.responseTime), MIN(p.minResponse), MAX(p.maxResponse), " +
           "SUM(CASE WHEN p.status = 'SUCCESS' THEN 1 ELSE 0 END), " +
           "SUM(CASE WHEN p.status = 'FAILURE' THEN 1 ELSE 0 END)) " +
           "FROM PerformanceResult p " +
           "WHERE p.testRunId = :runId " +
           "GROUP BY p.apiName")
    List<ApiResult> findResultsByTestRunId(@Param("runId") String runId);
    
    @Query("SELECT DISTINCT p.apiName FROM PerformanceResult p WHERE p.testRunId = :runId")
    List<String> findApiNamesByTestRunId(@Param("runId") String runId);
}

5. Service Layer
// src/main/java/com/example/performance/service/PerformanceService.java
package com.example.performance.service;

import com.example.performance.dto.ApiResult;
import com.example.performance.dto.TestRun;
import com.example.performance.repository.PerformanceResultRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
public class PerformanceService {
    
    private final PerformanceResultRepository repository;
    
    @Autowired
    public PerformanceService(PerformanceResultRepository repository) {
        this.repository = repository;
    }
    
    public List<String> getAvailableMonths() {
        return repository.findDistinctMonths();
    }
    
    public List<TestRun> getTestRunsForMonth(String yearMonth) {
        YearMonth ym = YearMonth.parse(yearMonth, DateTimeFormatter.ofPattern("yyyy-MM"));
        LocalDateTime startDate = ym.atDay(1).atStartOfDay();
        LocalDateTime endDate = ym.atEndOfMonth().atTime(23, 59, 59);
        
        return repository.findTestRunsBetweenDates(startDate, endDate);
    }
    
    public List<ApiResult> getResultsForRun(String runId) {
        return repository.findResultsByTestRunId(runId);
    }
    
    public List<String> getApiNamesForRun(String runId) {
        return repository.findApiNamesByTestRunId(runId);
    }
}

6. Controller
// src/main/java/com/example/performance/controller/PerformanceController.java
package com.example.performance.controller;

import com.example.performance.dto.ApiResult;
import com.example.performance.dto.TestRun;
import com.example.performance.service.PerformanceService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;

@RestController
@RequestMapping("/api/performance")
public class PerformanceController {
    
    private final PerformanceService performanceService;
    
    @Autowired
    public PerformanceController(PerformanceService performanceService) {
        this.performanceService = performanceService;
    }
    
    @GetMapping("/available-months")
    public List<String> getAvailableMonths() {
        return performanceService.getAvailableMonths();
    }
    
    @GetMapping("/test-runs")
    public List<TestRun> getTestRunsForMonth(
            @RequestParam String month) { // Format: "YYYY-MM"
        return performanceService.getTestRunsForMonth(month);
    }
    
    @GetMapping("/results/{runId}")
    public List<ApiResult> getResultsForRun(@PathVariable String runId) {
        return performanceService.getResultsForRun(runId);
    }
    
    @GetMapping("/apis/{runId}")
    public List<String> getApiNamesForRun(@PathVariable String runId) {
        return performanceService.getApiNamesForRun(runId);
    }
    
    @GetMapping("/results/time-range")
    public List<ApiResult> getResultsForTimeRange(
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDate,
            @RequestParam(required = false) String apiName) {
        // Implement if you need time-range based queries
        return null;
    }
}

7. Swagger Configuration (Optional)
// src/main/java/com/example/performance/config/SwaggerConfig.java
package com.example.performance.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SwaggerConfig {
    @Bean
    public Docket api() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .apis(RequestHandlerSelectors.basePackage("com.example.performance.controller"))
                .paths(PathSelectors.any())
                .build();
    }
}

8. Application Properties
# src/main/resources/application.properties
spring.datasource.url=jdbc:oracle:thin:@//localhost:1521/ORCLCDB
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle12cDialect

server.port=8080

# Enable H2 console (optional for development)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console


pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    
    <groupId>com.example</groupId>
    <artifactId>performance-reports</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>performance-reports</name>
    <description>Performance Test Reporting Application</description>
    
    <properties>
        <java.version>17</java.version>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        
        <!-- Dependency versions -->
        <lombok.version>1.18.28</lombok.version>
        <oracle.jdbc.version>19.3.0.0</oracle.jdbc.version>
        <swagger.version>3.0.0</swagger.version>
    </properties>
    
    <dependencies>
        <!-- Spring Boot Starters -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        
        <!-- Oracle Database -->
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <version>${oracle.jdbc.version}</version>
        </dependency>
        
        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>
        
        <!-- Swagger/OpenAPI Documentation -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.1.0</version>
        </dependency>
        
        <!-- Testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!-- H2 for testing (optional) -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!-- Date/Time Utilities -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            
            <!-- Compiler plugin for Java 17 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            
            <!-- Formatter plugin -->
            <plugin>
                <groupId>net.revelc.code</groupId>
                <artifactId>formatter-maven-plugin</artifactId>
                <version>2.20.0</version>
                <configuration>
                    <configFile>${project.basedir}/eclipse-formatter.xml</configFile>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
        </plugins>
    </build>
    
    <profiles>
        <profile>
            <id>dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <spring.profiles.active>dev</spring.profiles.active>
            </properties>
        </profile>
        
        <profile>
            <id>prod</id>
            <properties>
                <spring.profiles.active>prod</spring.profiles.active>
            </properties>
        </profile>
    </profiles>
</project>


react
------
// src/views/PerformanceReports.tsx
import React, { useState, useEffect } from 'react';
import { 
  Box, Typography, Container, FormControl, InputLabel, 
  Select, MenuItem, Grid, CircularProgress 
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers';
import { LineChart, BarChart } from '@mui/x-charts';
import axios from 'axios';
import { format, startOfMonth, endOfMonth, eachDayOfInterval } from 'date-fns';

interface TestRun {
  runId: string;
  timestamp: string;
  description?: string;
}

interface ApiResult {
  apiName: string;
  responseTime: number;
  minResponse: number;
  maxResponse: number;
  successCount: number;
  failureCount: number;
}

const PerformanceReports = () => {
  const [selectedMonth, setSelectedMonth] = useState<Date>(new Date());
  const [availableMonths, setAvailableMonths] = useState<Date[]>([]);
  const [testRuns, setTestRuns] = useState<TestRun[]>([]);
  const [selectedRun, setSelectedRun] = useState<string>('');
  const [apiResults, setApiResults] = useState<ApiResult[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  // Fetch available months with test runs
  useEffect(() => {
    axios.get('/api/performance/available-months')
      .then(response => {
        setAvailableMonths(response.data.map((dateStr: string) => new Date(dateStr)));
      });
  }, []);

  // Fetch test runs for selected month
  useEffect(() => {
    if (selectedMonth) {
      const monthStart = startOfMonth(selectedMonth);
      const monthEnd = endOfMonth(selectedMonth);
      
      axios.get('/api/performance/test-runs', {
        params: {
          startDate: monthStart.toISOString(),
          endDate: monthEnd.toISOString()
        }
      }).then(response => {
        setTestRuns(response.data);
        if (response.data.length > 0) {
          setSelectedRun(response.data[0].runId);
        }
      });
    }
  }, [selectedMonth]);

  // Fetch API results for selected test run
  useEffect(() => {
    if (selectedRun) {
      setIsLoading(true);
      axios.get(`/api/performance/results/${selectedRun}`)
        .then(response => {
          setApiResults(response.data);
          setIsLoading(false);
        })
        .catch(() => setIsLoading(false));
    }
  }, [selectedRun]);

  return (
    <Container maxWidth="xl">
      <Typography variant="h4" gutterBottom>
        Performance Test Reports
      </Typography>
      
      {/* Filters */}
      <Grid container spacing={3} mb={4}>
        <Grid item xs={12} md={4}>
          <FormControl fullWidth>
            <InputLabel>Select Month</InputLabel>
            <Select
              value={selectedMonth}
              onChange={(e) => setSelectedMonth(e.target.value as Date)}
              renderValue={(value) => format(value as Date, 'MMMM yyyy')}
            >
              {availableMonths.map((month) => (
                <MenuItem key={month.toString()} value={month}>
                  {format(month, 'MMMM yyyy')}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>
        
        <Grid item xs={12} md={4}>
          <FormControl fullWidth>
            <InputLabel>Select Test Run</InputLabel>
            <Select
              value={selectedRun}
              onChange={(e) => setSelectedRun(e.target.value as string)}
              disabled={!testRuns.length}
            >
              {testRuns.map((run) => (
                <MenuItem key={run.runId} value={run.runId}>
                  {format(new Date(run.timestamp), 'MMM dd, yyyy HH:mm')} - {run.description || 'Run'}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Grid>
      </Grid>
      
      {/* Charts */}
      {isLoading ? (
        <Box display="flex" justifyContent="center" my={4}>
          <CircularProgress />
        </Box>
      ) : apiResults.length > 0 ? (
        <>
          <Box mb={4}>
            <Typography variant="h6">Response Time Comparison</Typography>
            <BarChart
              xAxis={[{ 
                scaleType: 'band', 
                dataKey: 'apiName',
                label: 'API Endpoint'
              }]}
              series={[
                { dataKey: 'responseTime', label: 'Avg Response (ms)' },
                { dataKey: 'minResponse', label: 'Min Response (ms)' },
                { dataKey: 'maxResponse', label: 'Max Response (ms)' }
              ]}
              dataset={apiResults}
              height={400}
            />
          </Box>
          
          <Box mb={4}>
            <Typography variant="h6">Success/Failure Rates</Typography>
            <BarChart
              xAxis={[{ scaleType: 'band', dataKey: 'apiName' }]}
              series={[
                { dataKey: 'successCount', label: 'Success Count' },
                { dataKey: 'failureCount', label: 'Failure Count' }
              ]}
              dataset={apiResults}
              height={400}
            />
          </Box>
        </>
      ) : (
        <Typography>No performance data available for the selected criteria</Typography>
      )}
    </Container>
  );
};

export default PerformanceReports;
