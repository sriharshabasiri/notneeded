all:
  vars:
    ansible_user: jboss
    ansible_become: true
    ansible_become_method: sudo
    jboss_home: /opt/jboss/v7.0
    config_path: "{{ jboss_home }}/standalone/configuration"
    backup_suffix: "_PPM_OCT25"
    password_length: 12
    password_policy:
      special_char: "_"
      min_numeric: 1
      min_uppercase: 1
      min_lowercase: 1
    db_users:
      - corebank_read
      - corebank_supt
      - dfscust
      - crmuser
      - fimaster
      - ssoadm
      - fiejb
      - intadm
      - ceadm
      - apdmrhel
      - dedupadm
      - finbatchperf

  children:

    dev:
      children:
        dev1:
          hosts:
            dev1jboss1:
              ansible_host: dev1jboss1.internal.local
            dev1jboss2:
              ansible_host: dev1jboss2.internal.local
          vars:
            db_sid: COREDEV
        dev2:
          hosts:
            dev2jboss1:
              ansible_host: dev2jboss1.internal.local
          vars:
            db_sid: COREDEV
        dev3:
          hosts:
            dev3jboss1:
              ansible_host: dev3jboss1.internal.local
            dev3jboss2:
              ansible_host: dev3jboss2.internal.local
          vars:
            db_sid: COREDEV

    dm:
      children:
        dm1:
          hosts:
            dm1jboss1:
              ansible_host: dm1jboss1.internal.local
          vars:
            db_sid: COREDM
        dm2:
          hosts:
            dm2jboss1:
              ansible_host: dm2jboss1.internal.local
              db_sid: COREDM

    perf:
      children:
        perf1:
          hosts:
            perf1jboss1:
              ansible_host: perf1jboss1.internal.local
            perf1jboss2:
              ansible_host: perf1jboss2.internal.local
          vars:
            db_sid: COREPERF
        perf2:
          hosts:
            perf2jboss1:
              ansible_host: perf2jboss1.internal.local
          vars:
            db_sid: COREPERF

    esqm:
      children:
        asys:
          hosts:
            asys1:
              ansible_host: asys1.internal.local
            asys2:
              ansible_host: asys2.internal.local
          vars:
            db_sid: COREQA
        tsys:
          hosts:
            tsys1:
              ansible_host: tsys1.internal.local
          vars:
            db_sid: COREQA
        msto:
          hosts:
            msto1:
              ansible_host: msto1.internal.local
          vars:
            db_sid: COREQA
        vsto:
          hosts:
            vsto1:
              ansible_host: vsto1.internal.local
          vars:
            db_sid: COREQA
        qsys:
          hosts:
            qsys1:
              ansible_host: qsys1.internal.local
          vars:
            db_sid: COREQA


---
- name: Rotate Oracle DB passwords and update JBoss configs
  hosts: all
  gather_facts: no
  vars:
    db_admin_user: sys
    db_admin_pass: SysAdmin@123
    password_dir: /tmp/db_passwords
    encoded_dir: /tmp/encoded_passwords
    password_length: 12

  pre_tasks:
    - name: Ensure output directories exist (local)
      delegate_to: localhost
      file:
        path: "{{ item }}"
        state: directory
        mode: "0700"
      loop:
        - "{{ password_dir }}"
        - "{{ encoded_dir }}"

  tasks:

    - name: Generate passwords for DB users (once per env)
      run_once: true
      set_fact:
        db_passwords: "{{ dict(db_users | zip(random_passwords)) }}"
      vars:
        random_passwords: >-
          {{ db_users | map('community.general.random_string', 
                             length=password_length, 
                             special_chars='_', 
                             upper=True, 
                             lower=True, 
                             digits=True) | list }}

    - name: Save generated passwords to local file
      delegate_to: localhost
      run_once: true
      copy:
        dest: "{{ password_dir }}/{{ group_names[1] | default(inventory_hostname) }}_passwords.txt"
        content: |
          {% for user, pwd in db_passwords.items() %}
          {{ user }}={{ pwd }}
          {% endfor %}

    - name: Alter Oracle usersâ€™ passwords (run from first host only)
      run_once: true
      delegate_to: "{{ groups[inventory_hostname][0] | default(inventory_hostname) }}"
      shell: |
        export ORACLE_SID={{ db_sid }}
        export ORAENV_ASK=NO
        . /usr/local/bin/oraenv > /dev/null 2>&1
        for user in {{ db_users | join(' ') }}; do
          passwd="{{ db_passwords[user] }}"
          echo "alter user $user identified by \"$passwd\";" | sqlplus -s {{ db_admin_user }}/{{ db_admin_pass }}@{{ db_sid }} as sysdba
        done
      args:
        executable: /bin/bash

    - name: Backup standalone-full-ha.xml
      shell: |
        cd {{ config_path }}
        cp -p standalone-full-ha.xml standalone-full-ha.xml{{ backup_suffix }}
        cp -p standalone-full-ha.xml standalone-full-ha.xml{{ backup_suffix }}_update
      args:
        executable: /bin/bash

    - name: Encode passwords on each JBoss server
      shell: |
        export JBOSS_HOME={{ jboss_home }}
        export CLASSPATH=$JBOSS_HOME/modules/system/layers/base/org/picketbox/main/*:$JBOSS_HOME/modules/system/layers/base/org/jboss/logging/main/*
        > /tmp/encoded_passwords_{{ inventory_hostname }}.txt
        {% for user, pwd in db_passwords.items() %}
        echo "{{ user }}:$(java org.picketbox.datasource.security.SecureIdentityLoginModule '{{ pwd }}' | tail -1)" >> /tmp/encoded_passwords_{{ inventory_hostname }}.txt
        {% endfor %}
      args:
        executable: /bin/bash

    - name: Update standalone-full-ha.xml with encoded passwords
      shell: |
        cd {{ config_path }}
        while IFS=":" read -r user enc; do
          sed -i "/<module-option name=\"username\" value=\"$user\"\/>/{
            n; s|<module-option name=\"password\" value=\"[^\"]*\"\/>|<module-option name=\"password\" value=\"$enc\"\/>|
          }" standalone-full-ha.xml
        done < /tmp/encoded_passwords_{{ inventory_hostname }}.txt
      args:
        executable: /bin/bash

    - name: Restart JBoss
      shell: |
        stopjboss
        startjboss
      args:
        executable: /bin/bash

  post_tasks:
    - name: Print summary
      debug:
        msg: "Passwords updated for {{ group_names[1] | default(inventory_hostname) }} environment on {{ inventory_hostname }}"
