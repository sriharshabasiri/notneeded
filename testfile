// config/VeryEarlyTest.java
@Configuration
public class VeryEarlyTest {
    
    private static final Logger logger = LoggerFactory.getLogger(VeryEarlyTest.class);
    
    @Autowired
    private Environment environment;
    
    @PostConstruct
    public void veryEarlyTest() {
        logger.info("=== VERY EARLY DATABASE TEST (RUNNING NOW) ===");
        System.out.println("üöÄ VERY EARLY TEST STARTED - This should print immediately!");
        
        try {
            testDatabaseConnection();
        } catch (Exception e) {
            logger.error("VERY EARLY TEST FAILED: {}", e.getMessage());
            e.printStackTrace();
            // Don't throw - just log so we can see what happened
        }
    }
    
    private void testDatabaseConnection() {
        try {
            // Get properties directly
            String url = environment.getProperty("environments.dev.url");
            String username = environment.getProperty("environments.dev.username"); 
            String password = environment.getProperty("environments.dev.password");
            
            if (url == null) {
                logger.error("‚ùå No database URL found in properties");
                listAllProperties();
                return;
            }
            
            logger.info("Testing connection to: {}", url);
            System.out.println("üîó Connecting to: " + url);
            
            // Manual connection test
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (Connection conn = DriverManager.getConnection(url, username, password)) {
                String dbName = conn.getCatalog();
                logger.info("‚úÖ SUCCESS - Connected to database: {}", dbName);
                System.out.println("‚úÖ SUCCESS - Connected to: " + dbName);
                
                // Test our specific table
                testTargetTable(conn);
            }
            
        } catch (Exception e) {
            logger.error("‚ùå Connection failed: {}", e.getMessage());
            System.out.println("‚ùå CONNECTION FAILED: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void testTargetTable(Connection conn) {
        try {
            DatabaseMetaData metaData = conn.getMetaData();
            
            // Try multiple table name variations
            String[][] variations = {
                {"apdmrhel", "dfs_apdm_rep"},
                {"apdmrhel", "DFS_APDM_REP"}, 
                {null, "dfs_apdm_rep"},
                {null, "DFS_APDM_REP"},
                {"apdmrhel", "%apdm_rep%"}
            };
            
            boolean found = false;
            for (String[] variation : variations) {
                ResultSet tables = metaData.getTables(null, variation[0], variation[1], new String[]{"TABLE"});
                if (tables.next()) {
                    String catalog = tables.getString("TABLE_CAT");
                    String schema = tables.getString("TABLE_SCHEM");
                    String tableName = tables.getString("TABLE_NAME");
                    
                    logger.info("‚úÖ FOUND TABLE: {}.{}.{}", catalog, schema, tableName);
                    System.out.println("‚úÖ FOUND TABLE: " + catalog + "." + schema + "." + tableName);
                    
                    // Test query
                    testTableQuery(conn, catalog, schema, tableName);
                    found = true;
                    break;
                }
            }
            
            if (!found) {
                logger.error("‚ùå Table not found with any variation");
                System.out.println("‚ùå TABLE NOT FOUND - Listing all tables...");
                listAllTables(conn);
            }
            
        } catch (Exception e) {
            logger.error("Table test failed: {}", e.getMessage());
            System.out.println("‚ùå TABLE TEST FAILED: " + e.getMessage());
        }
    }
    
    private void testTableQuery(Connection conn, String catalog, String schema, String tableName) {
        try {
            String fullTableName = (schema != null ? schema + "." : "") + tableName;
            String sql = "SELECT COUNT(*) as count FROM " + fullTableName;
            
            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(sql)) {
                 
                if (rs.next()) {
                    int count = rs.getInt("count");
                    logger.info("‚úÖ QUERY SUCCESS - Table {} has {} rows", fullTableName, count);
                    System.out.println("‚úÖ QUERY SUCCESS - " + fullTableName + " has " + count + " rows");
                }
            }
        } catch (Exception e) {
            logger.error("Query failed: {}", e.getMessage());
            System.out.println("‚ùå QUERY FAILED: " + e.getMessage());
        }
    }
    
    private void listAllTables(Connection conn) {
        try {
            DatabaseMetaData metaData = conn.getMetaData();
            ResultSet tables = metaData.getTables(null, null, "%", new String[]{"TABLE"});
            
            System.out.println("üìã ALL TABLES IN DATABASE:");
            int count = 0;
            while (tables.next()) {
                String catalog = tables.getString("TABLE_CAT");
                String schema = tables.getString("TABLE_SCHEM");
                String tableName = tables.getString("TABLE_NAME");
                System.out.println("   - " + catalog + "." + schema + "." + tableName);
                count++;
            }
            System.out.println("Total tables found: " + count);
            
        } catch (Exception e) {
            System.out.println("Failed to list tables: " + e.getMessage());
        }
    }
    
    private void listAllProperties() {
        System.out.println("üîç ALL PROPERTIES STARTING WITH 'environments':");
        for (String propName : ((AbstractEnvironment) environment).getPropertySources().stream()
                .map(PropertySource::getName)
                .collect(Collectors.toList())) {
            if (propName.contains("environments")) {
                System.out.println("   - " + propName);
            }
        }
    }
}



// config/ImmediateTest.java
@Component
@Order(1) // Run as early as possible
public class ImmediateTest implements ApplicationRunner {
    
    private static final Logger logger = LoggerFactory.getLogger(ImmediateTest.class);
    
    @Autowired
    private Environment environment;
    
    @Override
    public void run(ApplicationArguments args) throws Exception {
        logger.info("=== IMMEDIATE TEST (ApplicationRunner) ===");
        System.out.println("üöÄ IMMEDIATE TEST STARTED via ApplicationRunner");
        
        testImmediately();
    }
    
    private void testImmediately() {
        // Same test logic as above
        testDatabaseConnection();
    }
    
    private void testDatabaseConnection() {
        // Copy the same method from VeryEarlyTest
        try {
            String url = environment.getProperty("environments.dev.url");
            String username = environment.getProperty("environments.dev.username"); 
            String password = environment.getProperty("environments.dev.password");
            
            System.out.println("URL: " + url);
            System.out.println("Username: " + username);
            
            // ... rest of the test logic
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}




// Your main application class
@SpringBootApplication
public class Application {
    
    private static final Logger logger = LoggerFactory.getLogger(Application.class);
    
    // Static initializer - runs when class loads
    static {
        System.out.println("üéØ STATIC INITIALIZER - This runs when the class loads");
    }
    
    // Instance initializer - runs when instance is created
    {
        System.out.println("üéØ INSTANCE INITIALIZER - This runs when Application instance is created");
    }
    
    public static void main(String[] args) {
        System.out.println("üöÄ MAIN METHOD STARTED");
        
        try {
            // Test before Spring even starts
            preSpringTest();
            
            SpringApplication app = new SpringApplication(Application.class);
            app.setBannerMode(Banner.Mode.OFF);
            app.run(args);
            
        } catch (Exception e) {
            System.err.println("üí• APPLICATION FAILED: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private static void preSpringTest() {
        System.out.println("üîç PRE-SPRING DATABASE TEST");
        
        try {
            // Read properties manually
            Properties props = new Properties();
            try (InputStream input = Application.class.getClassLoader()
                    .getResourceAsStream("application.yml")) {
                if (input != null) {
                    // Simple property read for testing
                    System.out.println("Found application.yml");
                }
            }
            
            // Try manual database connection
            String url = "jdbc:mysql://localhost:3306/apdmrhel";
            String username = "your_username";
            String password = "your_password";
            
            Class.forName("com.mysql.cj.jdbc.Driver");
            try (Connection conn = DriverManager.getConnection(url, username, password)) {
                System.out.println("‚úÖ PRE-SPRING: Connected to " + conn.getCatalog());
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå PRE-SPRING TEST FAILED: " + e.getMessage());
        }
    }
}
