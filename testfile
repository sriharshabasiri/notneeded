// OracleCrossSchemaDiagnostic.java
import java.sql.*;
import java.util.*;

public class OracleCrossSchemaDiagnostic {
    
    public static void main(String[] args) {
        System.out.println("üöÄ ORACLE CROSS-SCHEMA DIAGNOSTIC STARTING...\n");
        
        testCrossSchemaAccess();
    }
    
    private static void testCrossSchemaAccess() {
        String url = "jdbc:oracle:thin:@localhost:1521:XE"; // Adjust as needed
        String username = "coreauto_s"; // Your connecting user
        String password = "your_password"; // Your password
        
        testConnection(url, username, password);
    }
    
    private static void testConnection(String url, String username, String password) {
        System.out.println("üîó Testing connection as: " + username);
        System.out.println("   URL: " + url);
        
        try {
            Class.forName("oracle.jdbc.OracleDriver");
            
            try (Connection conn = DriverManager.getConnection(url, username, password)) {
                System.out.println("‚úÖ CONNECTION SUCCESSFUL");
                
                // Get current user
                String currentUser = getCurrentUser(conn);
                System.out.println("   Connected as: " + currentUser);
                
                // Test access to apdmrhel.dfs_apdm_rep
                testTableAccess(conn, "apdmrhel", "dfs_apdm_rep");
                
                // List all tables we can access in apdmrhel schema
                System.out.println("\nüìã ALL TABLES ACCESSIBLE IN APDMREHEL SCHEMA:");
                listTablesInSchema(conn, "apdmrhel");
                
                // Check permissions on our target table
                checkTablePermissions(conn, "apdmrhel", "dfs_apdm_rep");
                
            } catch (SQLException e) {
                System.out.println("‚ùå CONNECTION FAILED: " + e.getMessage());
                System.out.println("   Error Code: " + e.getErrorCode());
            }
            
        } catch (ClassNotFoundException e) {
            System.out.println("‚ùå ORACLE DRIVER NOT FOUND");
        } catch (Exception e) {
            System.out.println("‚ùå UNEXPECTED ERROR: " + e.getMessage());
        }
    }
    
    private static void testTableAccess(Connection conn, String schema, String tableName) {
        System.out.println("\nüîé TESTING ACCESS TO: " + schema + "." + tableName);
        
        // Test 1: Simple SELECT count
        try {
            String sql = "SELECT COUNT(*) FROM " + schema + "." + tableName;
            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(sql)) {
                if (rs.next()) {
                    int count = rs.getInt(1);
                    System.out.println("‚úÖ SELECT ACCESS: SUCCESS - " + count + " rows");
                }
            }
        } catch (SQLException e) {
            System.out.println("‚ùå SELECT ACCESS FAILED: " + e.getMessage());
        }
        
        // Test 2: Describe table structure
        try {
            System.out.println("\nüìê TABLE STRUCTURE:");
            String sql = "SELECT column_name, data_type, nullable " +
                        "FROM all_tab_columns " +
                        "WHERE owner = UPPER(?) AND table_name = UPPER(?) " +
                        "ORDER BY column_id";
            
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, schema);
                pstmt.setString(2, tableName);
                
                ResultSet rs = pstmt.executeQuery();
                int colCount = 0;
                while (rs.next()) {
                    String colName = rs.getString("column_name");
                    String dataType = rs.getString("data_type");
                    String nullable = rs.getString("nullable");
                    System.out.println("   - " + colName + " | " + dataType + " | " + 
                                     (nullable.equals("Y") ? "NULL" : "NOT NULL"));
                    colCount++;
                }
                if (colCount == 0) {
                    System.out.println("   ‚ùå No columns found - table might not exist or no access");
                }
            }
        } catch (SQLException e) {
            System.out.println("‚ùå Failed to get table structure: " + e.getMessage());
        }
    }
    
    private static void listTablesInSchema(Connection conn, String schema) {
        try {
            String sql = "SELECT table_name, tablespace_name " +
                        "FROM all_tables " +
                        "WHERE owner = UPPER(?) " +
                        "ORDER BY table_name";
            
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, schema);
                
                ResultSet rs = pstmt.executeQuery();
                int count = 0;
                while (rs.next()) {
                    String tableName = rs.getString("table_name");
                    String tablespace = rs.getString("tablespace_name");
                    System.out.println("   - " + tableName + " (tablespace: " + tablespace + ")");
                    count++;
                }
                System.out.println("   Total: " + count + " tables");
            }
        } catch (SQLException e) {
            System.out.println("   Failed to list tables: " + e.getMessage());
        }
    }
    
    private static void checkTablePermissions(Connection conn, String schema, String tableName) {
        System.out.println("\nüîê CHECKING PERMISSIONS ON: " + schema + "." + tableName);
        
        try {
            String sql = "SELECT privilege, grantable " +
                        "FROM user_tab_privs " +
                        "WHERE owner = UPPER(?) AND table_name = UPPER(?)";
            
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, schema);
                pstmt.setString(2, tableName);
                
                ResultSet rs = pstmt.executeQuery();
                int privCount = 0;
                while (rs.next()) {
                    String privilege = rs.getString("privilege");
                    String grantable = rs.getString("grantable");
                    System.out.println("   - " + privilege + 
                                     (grantable.equals("YES") ? " (WITH GRANT OPTION)" : ""));
                    privCount++;
                }
                if (privCount == 0) {
                    System.out.println("   ‚ùå NO EXPLICIT PERMISSIONS FOUND");
                }
            }
        } catch (SQLException e) {
            System.out.println("   Failed to check permissions: " + e.getMessage());
        }
    }
    
    private static String getCurrentUser(Connection conn) throws SQLException {
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT USER FROM DUAL")) {
            return rs.next() ? rs.getString(1) : "unknown";
        }
    }
}
